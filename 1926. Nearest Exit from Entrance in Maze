Graphs - BFS (Medium)

You are given an m x n matrix maze (0-indexed) with empty cells (represented as '.') and walls (represented as '+'). You are also given the entrance of the maze, where entrance = [entrancerow, entrancecol] denotes the row and column of the cell you are initially standing at.

In one step, you can move one cell up, down, left, or right. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the nearest exit from the entrance. An exit is defined as an empty cell that is at the border of the maze. The entrance does not count as an exit.

Return the number of steps in the shortest path from the entrance to the nearest exit, or -1 if no such path exists.

<8.31 1st attempt>
from collections import deque

class Solution:
    def nearestExit(self, maze: List[List[str]], entrance: List[int]) -> int:
        q = deque([(entrance[0], entrance[1])]) # uses a list with a single tuple element
        moves = 1
        rows = len(maze)
        cols = len(maze[0])

        offsets = [(0, 1), (1, 0), (0, -1), (-1, 0)]

        maze[entrance[0]][entrance[1]] = '+'

        while q:
            for _ in range(len(q)):
                i, j = q.popleft()

                for dx, dy in offsets:
                    x, y = i + dx, j + dy # checks four directions one by one

                    if x < 0 or y < 0 or x >= rows or y >= cols or maze[x][y] == '+': # ensures the route won't come back
                        continue # moves to the next direction
                    
                    if x == 0 or y == 0 or x == rows - 1 or y == cols - 1:
                        return moves # at the border
                    
                    maze[x][y] = '+'
                    q.append((x, y)) # this belongs to the outer loop -> neibouring nodes first -> ensures the nearest route can be returned immediately
            
            moves += 1 # moves to the 2nd closest node - the 2nd layer
        
        return -1 # non-above conditions has been met

Notes
1. shortest returned path by using BFS (layer-by-layer search)

<9.30 2nd attempt>
failed
