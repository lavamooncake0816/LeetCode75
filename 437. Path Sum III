Binary Tree - DFS (Medium)

Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.

The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).

<8.24 1st attempt>
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root: Optional[TreeNode], targetSum: int) -> int:
        # define the global result and path
        self.result = 0
        cache = {0:1}

        # recursive to get result
        self.dfs(root, targetSum, 0, cache)

        # return result
        return self.result

    def dfs(self, root, targetSum, curpathSum, cache):
        # exit condition
        if not root:
            return None

        # calculate curpathSum and required oldpathSum
        curpathSum += root.val
        oldpathSum = curpathSum - targetSum

        # update result and cache
        self.result += cache.get(oldpathSum, 0)
        cache[curpathSum] = cache.get(curpathSum, 0) + 1

        # dfs breakdown
        self.dfs(root.left, targetSum, curpathSum, cache)
        self.dfs(root.right, targetSum, curpathSum, cache)

        # when move to a diff branch, the curpathSum is no longer available, hence remove one
        cache[curpathSum] -= 1

Notes
1. 'cache' is being used to store intermediate results or values associated with specific keys 2. difficult for me to understand (the concept of cache and double recursion)

<9.18 2nd attempt>
failed
