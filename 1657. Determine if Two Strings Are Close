Hash Map / Set (Medium)

Two strings are considered close if you can attain one from the other using the following operations:

Operation 1: Swap any two existing characters.
For example, abcde -> aecdb
Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.
For example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)
You can use the operations on either string as many times as necessary.

Given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.

<8.1 1st attempt>
class Solution:
    def closeStrings(self, word1: str, word2: str) -> bool:
        # same num of total chars
        # the num of each char match
        # the char type match
        av = []
        bv = []
        for i in word1:
            av.append(i)
        for i in word2:
            bv.append(i)
        av = Counter(av).values()
        bv = Counter(bv).values()
        av = sorted(av)
        bv = sorted(bv)

        ai = []
        bi = []
        for i in word1:
            ai.append(i)
        for i in word2:
            bi.append(i)
        ai = set(ai)
        bi = set(bi)
        ai = sorted(ai)
        bi = sorted(bi)
        if len(word1) == len(word2) and av == bv and ai == bi:
            return True
        return False

Notes
1. whilst the code works, the runtime and memory are terrible 2. look at what others have done (same idea, but one-line solution)

<9.14 2nd attempt>
from collections import Counter

class Solution:
    def closeStrings(self, word1: str, word2: str) -> bool:
        c1, c2 = Counter(word1), Counter(word2)
        v1, v2 = c1.values(), c2.values()
        cc1, cc2 = Counter(v1), Counter(v2)
        if c1.keys() == c2.keys() and cc1 == cc2:
            return True
        False
