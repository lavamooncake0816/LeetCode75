Backtracking (Medium)

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

<9.19 1st attempt>
from collections import deque
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        res = deque([''])
        dic = ['0', '1', 'abc', 'def', 'ghi', 'jkl', 'mno', 'pqrs', 'tuv', 'wxyz']
        if not digits:
            return []

        for i in range(len(digits)):
            d = int(digits[i]) # str -> int
            while len(res[0]) == i: # ready to add following elements
                t = res.popleft()
                for c in dic[d]: # e.g., 'a', 'b', 'c' in dic[2]
                    res.append(t + c) # genius use of double loops

        return res

Notes
1. 'while len(res[0]) == i:' 2. clever use of 'popleft()' & triple loops 

<10.6 2nd attempt>
failed
