Linked List (Medium)

Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

You must solve the problem in O(1) extra space complexity and O(n) time complexity.

<8.7 1st attempt>
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head != None:
            first = second = ListNode
            first = head
            second = head.next
            even = second
            
            while second and second.next:
                first.next = first.next.next
                second.next = second.next.next
                first = first.next
                second = second.next
            first.next = even

        return head

Notes
1. two pointers (it's important to flexibly use the characteristics of the linked list) 2. pay attention to the return object

<9.16 2nd attempt>
failed

Notes
1. note the boundary of the while loop
