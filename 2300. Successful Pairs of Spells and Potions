Binary Search (Medium)

You are given two positive integer arrays spells and potions, of length n and m respectively, where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion.

You are also given an integer success. A spell and potion pair is considered successful if the product of their strengths is at least success.

Return an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell.

<9.16 1st attempt>
class Solution:
    def successfulPairs(self, spells: List[int], potions: List[int], success: int) -> List[int]:
        n = len(spells)
        m = len(potions)
        pairs = [0] * n

        potions.sort()
        for i, s in enumerate(spells):
            l, r = 0, m - 1
            while l <= r:
                mid = (l + r) // 2
                p = s * potions[mid]
                if p >= success:
                    r = mid - 1
                else:
                    l = mid + 1
            pairs[i] = m - l
        
        return pairs

Notes
1. flexibility in using the combination of 'sort()' and 'binary search' 2. next time see how lee does it

<10.3 2nd attempt>
failed

Notes
1. enumerate() 2. sort() vs. sorted() 3. ‘=’ is taken or not
