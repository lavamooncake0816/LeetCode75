Binary Search (Medium)

Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours.

Koko can decide her bananas-per-hour eating speed of k. Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer k such that she can eat all the bananas within h hours.

<9.18 1st attempt>
class Solution:
    def minEatingSpeed(self, piles: List[int], h: int) -> int:
        l, r = 1, max(piles)
        while l < r:
            m = (l + r) // 2 # try the median first
            if sum((p + m - 1) // m for p in piles) > h: # ceil
                l = m + 1 # the median is too small
            else:
                r = m # the median is too big
        return l

Notes
1. (p + m - 1) // m = ceil(p / m)

<10.3 2nd attempt>
failed

Notes
1. what exactly to return is tricky 2. the min can only be determined by full searching
