Linked List (Easy)

Given the head of a singly linked list, reverse the list, and return the reversed list.

<8.9 1st attempt>
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head == None or head.next == None: 
            return head # head = 5
        cur = self.reverseList(head.next) # cur = 5, head = 4
        head.next.next = head # 4 -> 5 -> 4
        head.next = None
        return cur

Notes
1. recursion termination condition 2. the idea of recursion is important

<9.17 2nd attempt>
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head
        cur = self.reverseList(head.next)
        head.next.next = head
        head.next = None
        return cur
