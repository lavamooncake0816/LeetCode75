Heap / Priority Queue (Medium)

You are given two 0-indexed integer arrays nums1 and nums2 of equal length n and a positive integer k. You must choose a subsequence of indices from nums1 of length k.

For chosen indices i0, i1, ..., ik - 1, your score is defined as:

The sum of the selected elements from nums1 multiplied with the minimum of the selected elements from nums2.
It can defined simply as: (nums1[i0] + nums1[i1] +...+ nums1[ik - 1]) * min(nums2[i0] , nums2[i1], ... ,nums2[ik - 1]).
Return the maximum possible score.

A subsequence of indices of an array is a set that can be derived from the set {0, 1, ..., n-1} by deleting some or no elements.

<9.6 1st attempt>
import heapq
class Solution:
    def maxScore(self, nums1: List[int], nums2: List[int], k: int) -> int:
        total = res = 0
        h = []
        for a, b in sorted(list(zip(nums1, nums2)), key = lambda ab: -ab[1]): # sorts these pairs of elements based on the second element of each pair ('ab[1]') in descending order
            heappush(h, a)
            total += a
            if len(h) > k:
                total -= heappop(h)
            if len(h) == k:
                res = max(res, total * b) # descending order ensures that the current 'b' is the smallest value
        return res

Notes
1. lee's method, just imprint it in your head... (sorted & key = lambda)

<10.2 2nd attempt>
failed
