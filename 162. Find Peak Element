Binary Search (Medium)

A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.

<9.16 1st attempt>
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        l = len(nums)
        i, j = 0, l - 1

        if l == 1:
            return 0  

        if nums[0] > nums[1]:
            return 0
        if nums[j] > nums[j-1]:
            return j
        
        i, j = 1, l - 2

        while i <= j:
            m = i + (j-i) // 2
            if nums[m] > nums[m-1] and nums[m] > nums[m+1]:
                return m
            elif nums[m] < nums[m-1]:
                j = m - 1
            elif nums[m] < nums[m+1]:
                i = m + 1
        return -1

Notes
1. avoid duplicate operations

<10.3 2nd attempt>
class Solution:
    def findPeakElement(self, nums: List[int]) -> int:
        l = len(nums)
        i, j = 0, l - 1

        if l == 1:
            return 0

        if nums[0] > nums[1]:
            return 0
        
        if nums[-1] > nums[-2]:
            return j

        else:
            while i <= j:
                m = (i + j) // 2
                if nums[m] > nums[m-1] and nums[m] > nums[m+1]:
                    return m
                elif nums[m] < nums[m+1]:
                    i = m
                elif nums[m] < nums[m-1]:
                    j = m
            return -1

Notes
1. why 'if' instead of 'elif' may cause 'Time Limit Exceeded'
