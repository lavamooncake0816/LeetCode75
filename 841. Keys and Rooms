Graphs - DFS (Medium)

There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.

When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.

Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.

<8.27 1st attempt>
class Solution:
    def canVisitAllRooms(self, rooms: List[List[int]]) -> bool:
        dfs = [0]
        seen = set(dfs)

        while dfs:
            i = dfs.pop() # first enter room 0
            for j in rooms[i]:
                if j not in seen:
                    dfs.append(j) # the next room to enter
                    seen.add(j) # stores the key
                    if len(seen) == len(rooms): # if all the rooms can be entered
                        return True
        return len(seen) == len(rooms) # for returning False

Notes
1. lee's solution (len(seen) == len(rooms)) 2. break vs. continue

<9.21 2nd attempt>
failed
